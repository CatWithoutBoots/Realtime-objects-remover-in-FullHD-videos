
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================


`default_nettype none


module DE10_Nano_D8M_DDR3(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		          		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		          		HDMI_TX_DE,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// HPS //////////
	inout 		          		HPS_CONV_USB_N,
	output		    [14:0]		HPS_DDR3_ADDR,
	output		     [2:0]		HPS_DDR3_BA,
	output		          		HPS_DDR3_CAS_N,
	output		          		HPS_DDR3_CKE,
	output		          		HPS_DDR3_CK_N,
	output		          		HPS_DDR3_CK_P,
	output		          		HPS_DDR3_CS_N,
	output		     [3:0]		HPS_DDR3_DM,
	inout 		    [31:0]		HPS_DDR3_DQ,
	inout 		     [3:0]		HPS_DDR3_DQS_N,
	inout 		     [3:0]		HPS_DDR3_DQS_P,
	output		          		HPS_DDR3_ODT,
	output		          		HPS_DDR3_RAS_N,
	output		          		HPS_DDR3_RESET_N,
	input 		          		HPS_DDR3_RZQ,
	output		          		HPS_DDR3_WE_N,
	output		          		HPS_ENET_GTX_CLK,
	inout 		          		HPS_ENET_INT_N,
	output		          		HPS_ENET_MDC,
	inout 		          		HPS_ENET_MDIO,
	input 		          		HPS_ENET_RX_CLK,
	input 		     [3:0]		HPS_ENET_RX_DATA,
	input 		          		HPS_ENET_RX_DV,
	output		     [3:0]		HPS_ENET_TX_DATA,
	output		          		HPS_ENET_TX_EN,
	inout 		          		HPS_GSENSOR_INT,
	inout 		          		HPS_I2C0_SCLK,
	inout 		          		HPS_I2C0_SDAT,
	inout 		          		HPS_I2C1_SCLK,
	inout 		          		HPS_I2C1_SDAT,
	inout 		          		HPS_KEY,
	inout 		          		HPS_LED,
	inout 		          		HPS_LTC_GPIO,
	output		          		HPS_SD_CLK,
	inout 		          		HPS_SD_CMD,
	inout 		     [3:0]		HPS_SD_DATA,
	output		          		HPS_SPIM_CLK,
	input 		          		HPS_SPIM_MISO,
	output		          		HPS_SPIM_MOSI,
	inout 		          		HPS_SPIM_SS,
	input 		          		HPS_UART_RX,
	output		          		HPS_UART_TX,
	input 		          		HPS_USB_CLKOUT,
	inout 		     [7:0]		HPS_USB_DATA,
	input 		          		HPS_USB_DIR,
	input 		          		HPS_USB_NXT,
	output		          		HPS_USB_STP,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to D8M-GPIO //////////
	inout 		          		CAMERA_I2C_SCL,
	inout 		          		CAMERA_I2C_SDA,
	output		          		CAMERA_PWDN_n,
	output		          		MIPI_CS_n,
	inout 		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	output		          		MIPI_MCLK,
	input 		          		MIPI_PIXEL_CLK,
	input 		     [9:0]		MIPI_PIXEL_D,
	input 		          		MIPI_PIXEL_HS,
	input 		          		MIPI_PIXEL_VS,
	output		          		MIPI_REFCLK,
	output		          		MIPI_RESET_n
);


parameter VIDEO_HEIGHT =16'd1080 ; 
parameter VIDEO_WIDTH  =16'd1920 ; 

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire disp_hs;
wire disp_vs;
wire disp_de;
wire [7:0] disp_r;
wire [7:0] disp_g;
wire [7:0] disp_b;

wire  RESET_N;
wire  RESET_N_DELAY  ; 

wire  I2C_RELEASE;
wire  VCM_RELAESE;
wire  HDMI_CLK;
wire  READY;

wire  D8M_CK_HZ;
wire  D8M_CK_HZ2;
wire  D8M_CK_HZ3;

wire  AUTO_FOC ;

//=======================================================
//  Structural coding
//=======================================================
assign HDMI_TX_DE  = disp_de;
assign HDMI_TX_CLK = ~HDMI_CLK; // sdc -invert
assign HDMI_TX_HS  = disp_hs;
assign HDMI_TX_VS  = disp_vs;

//assign HDMI_TX_D   = {disp_r, disp_g, disp_b};

assign CAMERA_PWDN_n  = RESET_N; 
assign MIPI_CS_n      = 0 ; 
assign MIPI_RESET_n   = RESET_N; 

//<------------------------------------------
assign I2C_RELEASE = CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE; 
assign CAMERA_I2C_SCL = ( I2C_RELEASE  )?  CAMERA_I2C_SCL_AF  : CAMERA_I2C_SCL_MIPI ;   
 
wire CAMERA_I2C_SCL_MIPI ; 
wire CAMERA_I2C_SCL_AF;

wire CAMERA_MIPI_RELAESE , MIPI_BRIDGE_RELEASE ; 



////---ALL RESET ---- 
//RESET_DELAY  d5(
//           .RESET_N      ( RESET_N ) ,
//           .CLK          ( FPGA_CLK2_50 ) , 
//           .READY        ( RESET_N_DELAY)  
//);  
 //------ MIPI BRIGE & CAMERA SETTING  --   
MIPI_BRIDGE_CAMERA_Config    cfin(
          .RESET_N           ( RESET_N_DELAY ), 
          .CLK_50            ( FPGA_CLK2_50 ), 
          .MIPI_I2C_SCL      ( MIPI_I2C_SCL ), 
          .MIPI_I2C_SDA      ( MIPI_I2C_SDA ), 
          .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE ),  
          .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
          .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA ),
          .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE ),
			 .VCM_RELAESE       ( VCM_RELAESE )
 );


////-- SYSTEM RESET 
//RESET_DELAY  del  (
// .RESET_N (KEY[0] ) ,
// .CLK     (FPGA_CLK3_50) , 
// .READY   ( RESET_N)  
//);


RESET_DELAY  dl(
           .RESET_N      ( KEY[0] ) ,
           .CLK          ( FPGA_CLK1_50) , 
           .READY0       ( RESET_N),
			  .READY1       ( RESET_N_DELAY ) 
); 



//------AUTO FOCUS ENABLE  --
AUTO_FOCUS_ON  u9( 
          .CLK_50      ( FPGA_CLK3_50 ), 
          .I2C_RELEASE ( I2C_RELEASE ), 
          .AUTO_FOC    ( AUTO_FOC )
               ) ; 
//------AUTO FOCUS ADJ  --
FOCUS_ADJ adl(
          .CLK_50        ( FPGA_CLK3_50) , 
          .RESET_N       ( I2C_RELEASE ), 
          .RESET_SUB_N   ( I2C_RELEASE ), 
          .AUTO_FOC      ( KEY[1] & AUTO_FOC ),
          .SW_Y          ( 0 ),
          .SW_H_FREQ     ( 0 ),   
          .SW_FUC_LINE   ( SW[3] ),   
          .SW_FUC_ALL_CEN( SW[3] ), 
		

			 .VIDEO_DE      (disp_de) ,
			
          .VIDEO_HS      ( disp_hs),
          .VIDEO_VS      ( disp_vs),
          .VIDEO_CLK     ( HDMI_CLK),
          .iR            (disp_r),
          .iG            (disp_g),
          .iB            (disp_b),
			 
	       .oR            (HDMI_TX_D[23:16] ), 
       	 .oG            (HDMI_TX_D[15:8]), 
	       .oB            (HDMI_TX_D[7:0]), 
	
          .READY         ( READY),
          .SCL           ( CAMERA_I2C_SCL_AF ), 
          .SDA           ( CAMERA_I2C_SDA )
   
);  



//HDMI I2C
I2C_HDMI_Config u_I2C_HDMI_Config (
	.iCLK(FPGA_CLK2_50),
	.iRST_N(KEY[0]),
	.I2C_SCLK(HDMI_I2C_SCL),
	.I2C_SDAT(HDMI_I2C_SDA),
	.HDMI_TX_INT(HDMI_TX_INT)
	);

///////////////////////////////////////
reg         MIPI_PIXEL_VS_d;
reg         MIPI_PIXEL_HS_d;
reg   [9:0] MIPI_PIXEL_D_d;


always @ (posedge MIPI_PIXEL_CLK) begin
   MIPI_PIXEL_VS_d <= MIPI_PIXEL_VS;
   MIPI_PIXEL_HS_d <= MIPI_PIXEL_HS;
   MIPI_PIXEL_D_d  <= MIPI_PIXEL_D;
end


soc_system u0 (
	//Clock&Reset
	.clk_clk                               ( FPGA_CLK3_50 ),                               //                            clk.clk
   .clk_hps_ref_clk                       (FPGA_CLK1_50),                             //                   pll_1_refclk.clk
   .clk_hdmi_ref_clk                      (FPGA_CLK2_50), 
	.reset_reset_n                         (1'b1),         

	
	//HPS ddr3
	.memory_mem_a                          ( HPS_DDR3_ADDR),                       //                memory.mem_a
	.memory_mem_ba                         ( HPS_DDR3_BA),                         //                .mem_ba
	.memory_mem_ck                         ( HPS_DDR3_CK_P),                       //                .mem_ck
	.memory_mem_ck_n                       ( HPS_DDR3_CK_N),                       //                .mem_ck_n
	.memory_mem_cke                        ( HPS_DDR3_CKE),                        //                .mem_cke
	.memory_mem_cs_n                       ( HPS_DDR3_CS_N),                       //                .mem_cs_n
	.memory_mem_ras_n                      ( HPS_DDR3_RAS_N),                      //                .mem_ras_n
	.memory_mem_cas_n                      ( HPS_DDR3_CAS_N),                      //                .mem_cas_n
	.memory_mem_we_n                       ( HPS_DDR3_WE_N),                       //                .mem_we_n
	.memory_mem_reset_n                    ( HPS_DDR3_RESET_N),                    //                .mem_reset_n
	.memory_mem_dq                         ( HPS_DDR3_DQ),                         //                .mem_dq
	.memory_mem_dqs                        ( HPS_DDR3_DQS_P),                      //                .mem_dqs
	.memory_mem_dqs_n                      ( HPS_DDR3_DQS_N),                      //                .mem_dqs_n
	.memory_mem_odt                        ( HPS_DDR3_ODT),                        //                .mem_odt
	.memory_mem_dm                         ( HPS_DDR3_DM),                         //                .mem_dm
	.memory_oct_rzqin                      ( HPS_DDR3_RZQ),                        //                .oct_rzqin
	//HPS SD card
	.hps_0_hps_io_hps_io_sdio_inst_CMD     ( HPS_SD_CMD    ),           //                               .hps_io_sdio_inst_CMD
	.hps_0_hps_io_hps_io_sdio_inst_D0      ( HPS_SD_DATA[0]     ),      //                               .hps_io_sdio_inst_D0
	.hps_0_hps_io_hps_io_sdio_inst_D1      ( HPS_SD_DATA[1]     ),      //                               .hps_io_sdio_inst_D1
	.hps_0_hps_io_hps_io_sdio_inst_CLK     ( HPS_SD_CLK   ),            //                               .hps_io_sdio_inst_CLK
	.hps_0_hps_io_hps_io_sdio_inst_D2      ( HPS_SD_DATA[2]     ),      //                               .hps_io_sdio_inst_D2
	.hps_0_hps_io_hps_io_sdio_inst_D3      ( HPS_SD_DATA[3]     ),      //                               .hps_io_sdio_inst_D3
	//HPS UART
	.hps_0_hps_io_hps_io_uart0_inst_RX     ( HPS_UART_RX   ),          //                               .hps_io_uart0_inst_RX
	.hps_0_hps_io_hps_io_uart0_inst_TX     ( HPS_UART_TX   ),          //                               .hps_io_uart0_inst_TX
	.hps_0_hps_io_hps_io_gpio_inst_GPIO53  ( HPS_LED   ),  //                               .hps_io_gpio_inst_GPIO53

	//D8M camera
	.terasic_camera_0_conduit_end_camera_d        ({MIPI_PIXEL_D_d[9:0], 2'b00}),               //   terasic_camera_0_conduit_end.D
	.terasic_camera_0_conduit_end_camera_fval     (MIPI_PIXEL_VS_d),            //                               .FVAL
	.terasic_camera_0_conduit_end_camera_lval     (MIPI_PIXEL_HS_d),            //                               .LVAL
	.terasic_camera_0_conduit_end_camera_pixclk   (MIPI_PIXEL_CLK),           //                               .PIXCLK
   
	
	//FPGA Partion
	 
        .alt_vip_itc_0_clocked_video_vid_clk          (HDMI_CLK),          //    alt_vip_itc_0_clocked_video.vid_clk
        .alt_vip_itc_0_clocked_video_vid_data         ({disp_r, disp_g, disp_b}),         //                               .vid_data
        .alt_vip_itc_0_clocked_video_vid_datavalid    (disp_de),    //                               .vid_datavalid
        .alt_vip_itc_0_clocked_video_vid_v_sync       (disp_vs),       //                               .vid_v_sync
        .alt_vip_itc_0_clocked_video_vid_h_sync       (disp_hs),       //                               .vid_h_sync
	 
	

	//clk for HDMI_TX_CLK
	.clk_hdmi_clk                                 (HDMI_CLK),
	//clk for MIPI_REFCLK
	.clk_d8m_clk                                  (MIPI_REFCLK)                                  //                        clk_d8m.clk
	
	
	);
	
//--LED DISPLAY--
CLOCKMEM  ck1 ( .CLK(HDMI_CLK),			.CLK_FREQ  (148500000 ), 	. CK_1HZ (D8M_CK_HZ   )  ) ;//148.5 MHZ
CLOCKMEM  ck2 ( .CLK(MIPI_REFCLK   ),	.CLK_FREQ  ( 20000000 ), 	. CK_1HZ (D8M_CK_HZ2  )  ) ;//20 MHZ
CLOCKMEM  ck3 ( .CLK(MIPI_PIXEL_CLK),	.CLK_FREQ  (100000000 ), 	. CK_1HZ (D8M_CK_HZ3  )  ) ;//100 MHZ

assign LED[7:0] = {  D8M_CK_HZ, D8M_CK_HZ2, D8M_CK_HZ3, 2'h0,VCM_RELAESE, CAMERA_MIPI_RELAESE, MIPI_BRIDGE_RELEASE  } ; 

endmodule
