// soc_system_gmm_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_gmm_mm_interconnect_3 (
		input  wire         mem_clk_out_clk_clk,                             //                           mem_clk_out_clk.clk
		input  wire         gmm_fg_detector_rst_reset_bridge_in_reset_reset, // gmm_fg_detector_rst_reset_bridge_in_reset.reset
		input  wire [5:0]   gmm_fg_detector_in_ram_address,                  //                    gmm_fg_detector_in_ram.address
		input  wire         gmm_fg_detector_in_ram_read,                     //                                          .read
		output wire [255:0] gmm_fg_detector_in_ram_readdata,                 //                                          .readdata
		input  wire         gmm_fg_detector_in_ram_write,                    //                                          .write
		input  wire [255:0] gmm_fg_detector_in_ram_writedata,                //                                          .writedata
		output wire [5:0]   in_ram_s1_address,                               //                                 in_ram_s1.address
		output wire         in_ram_s1_write,                                 //                                          .write
		input  wire [255:0] in_ram_s1_readdata,                              //                                          .readdata
		output wire [255:0] in_ram_s1_writedata,                             //                                          .writedata
		output wire [31:0]  in_ram_s1_byteenable,                            //                                          .byteenable
		output wire         in_ram_s1_chipselect,                            //                                          .chipselect
		output wire         in_ram_s1_clken                                  //                                          .clken
	);

	wire          gmm_fg_detector_in_ram_translator_avalon_universal_master_0_waitrequest;   // in_ram_s1_translator:uav_waitrequest -> gmm_fg_detector_in_ram_translator:uav_waitrequest
	wire  [255:0] gmm_fg_detector_in_ram_translator_avalon_universal_master_0_readdata;      // in_ram_s1_translator:uav_readdata -> gmm_fg_detector_in_ram_translator:uav_readdata
	wire          gmm_fg_detector_in_ram_translator_avalon_universal_master_0_debugaccess;   // gmm_fg_detector_in_ram_translator:uav_debugaccess -> in_ram_s1_translator:uav_debugaccess
	wire   [10:0] gmm_fg_detector_in_ram_translator_avalon_universal_master_0_address;       // gmm_fg_detector_in_ram_translator:uav_address -> in_ram_s1_translator:uav_address
	wire          gmm_fg_detector_in_ram_translator_avalon_universal_master_0_read;          // gmm_fg_detector_in_ram_translator:uav_read -> in_ram_s1_translator:uav_read
	wire   [31:0] gmm_fg_detector_in_ram_translator_avalon_universal_master_0_byteenable;    // gmm_fg_detector_in_ram_translator:uav_byteenable -> in_ram_s1_translator:uav_byteenable
	wire          gmm_fg_detector_in_ram_translator_avalon_universal_master_0_readdatavalid; // in_ram_s1_translator:uav_readdatavalid -> gmm_fg_detector_in_ram_translator:uav_readdatavalid
	wire          gmm_fg_detector_in_ram_translator_avalon_universal_master_0_lock;          // gmm_fg_detector_in_ram_translator:uav_lock -> in_ram_s1_translator:uav_lock
	wire          gmm_fg_detector_in_ram_translator_avalon_universal_master_0_write;         // gmm_fg_detector_in_ram_translator:uav_write -> in_ram_s1_translator:uav_write
	wire  [255:0] gmm_fg_detector_in_ram_translator_avalon_universal_master_0_writedata;     // gmm_fg_detector_in_ram_translator:uav_writedata -> in_ram_s1_translator:uav_writedata
	wire    [5:0] gmm_fg_detector_in_ram_translator_avalon_universal_master_0_burstcount;    // gmm_fg_detector_in_ram_translator:uav_burstcount -> in_ram_s1_translator:uav_burstcount

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (6),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (11),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (0),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) gmm_fg_detector_in_ram_translator (
		.clk                    (mem_clk_out_clk_clk),                                                       //                       clk.clk
		.reset                  (gmm_fg_detector_rst_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (gmm_fg_detector_in_ram_address),                                            //      avalon_anti_master_0.address
		.av_read                (gmm_fg_detector_in_ram_read),                                               //                          .read
		.av_readdata            (gmm_fg_detector_in_ram_readdata),                                           //                          .readdata
		.av_write               (gmm_fg_detector_in_ram_write),                                              //                          .write
		.av_writedata           (gmm_fg_detector_in_ram_writedata),                                          //                          .writedata
		.av_waitrequest         (),                                                                          //               (terminated)
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (32'b11111111111111111111111111111111),                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_ram_s1_translator (
		.clk                    (mem_clk_out_clk_clk),                                                       //                      clk.clk
		.reset                  (gmm_fg_detector_rst_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address            (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read               (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write              (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest        (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata           (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata          (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock               (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess        (gmm_fg_detector_in_ram_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.av_address             (in_ram_s1_address),                                                         //      avalon_anti_slave_0.address
		.av_write               (in_ram_s1_write),                                                           //                         .write
		.av_readdata            (in_ram_s1_readdata),                                                        //                         .readdata
		.av_writedata           (in_ram_s1_writedata),                                                       //                         .writedata
		.av_byteenable          (in_ram_s1_byteenable),                                                      //                         .byteenable
		.av_chipselect          (in_ram_s1_chipselect),                                                      //                         .chipselect
		.av_clken               (in_ram_s1_clken),                                                           //                         .clken
		.av_read                (),                                                                          //              (terminated)
		.av_begintransfer       (),                                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                                          //              (terminated)
		.av_burstcount          (),                                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                                      //              (terminated)
		.av_writebyteenable     (),                                                                          //              (terminated)
		.av_lock                (),                                                                          //              (terminated)
		.uav_clken              (1'b0),                                                                      //              (terminated)
		.av_debugaccess         (),                                                                          //              (terminated)
		.av_outputenable        (),                                                                          //              (terminated)
		.uav_response           (),                                                                          //              (terminated)
		.av_response            (2'b00),                                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                       //              (terminated)
	);

endmodule
