// soc_system_gmm_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_gmm_mm_interconnect_0 (
		input  wire         mem_clk_out_clk_clk,                               //                      mem_clk_out_clk.clk
		input  wire         in_dma_reset_n_reset_bridge_in_reset_reset,        // in_dma_reset_n_reset_bridge_in_reset.reset
		input  wire [10:0]  in_dma_descriptor_read_master_address,             //        in_dma_descriptor_read_master.address
		output wire         in_dma_descriptor_read_master_waitrequest,         //                                     .waitrequest
		input  wire         in_dma_descriptor_read_master_read,                //                                     .read
		output wire [31:0]  in_dma_descriptor_read_master_readdata,            //                                     .readdata
		output wire         in_dma_descriptor_read_master_readdatavalid,       //                                     .readdatavalid
		input  wire [10:0]  in_dma_descriptor_write_master_address,            //       in_dma_descriptor_write_master.address
		output wire         in_dma_descriptor_write_master_waitrequest,        //                                     .waitrequest
		input  wire [3:0]   in_dma_descriptor_write_master_byteenable,         //                                     .byteenable
		input  wire         in_dma_descriptor_write_master_write,              //                                     .write
		input  wire [31:0]  in_dma_descriptor_write_master_writedata,          //                                     .writedata
		output wire [1:0]   in_dma_descriptor_write_master_response,           //                                     .response
		output wire         in_dma_descriptor_write_master_writeresponsevalid, //                                     .writeresponsevalid
		output wire [5:0]   in_ram_s2_address,                                 //                            in_ram_s2.address
		output wire         in_ram_s2_write,                                   //                                     .write
		input  wire [255:0] in_ram_s2_readdata,                                //                                     .readdata
		output wire [255:0] in_ram_s2_writedata,                               //                                     .writedata
		output wire [31:0]  in_ram_s2_byteenable,                              //                                     .byteenable
		output wire         in_ram_s2_chipselect,                              //                                     .chipselect
		output wire         in_ram_s2_clken                                    //                                     .clken
	);

	wire          in_dma_descriptor_read_master_translator_avalon_universal_master_0_waitrequest;         // in_dma_descriptor_read_master_agent:av_waitrequest -> in_dma_descriptor_read_master_translator:uav_waitrequest
	wire   [31:0] in_dma_descriptor_read_master_translator_avalon_universal_master_0_readdata;            // in_dma_descriptor_read_master_agent:av_readdata -> in_dma_descriptor_read_master_translator:uav_readdata
	wire          in_dma_descriptor_read_master_translator_avalon_universal_master_0_debugaccess;         // in_dma_descriptor_read_master_translator:uav_debugaccess -> in_dma_descriptor_read_master_agent:av_debugaccess
	wire   [10:0] in_dma_descriptor_read_master_translator_avalon_universal_master_0_address;             // in_dma_descriptor_read_master_translator:uav_address -> in_dma_descriptor_read_master_agent:av_address
	wire          in_dma_descriptor_read_master_translator_avalon_universal_master_0_read;                // in_dma_descriptor_read_master_translator:uav_read -> in_dma_descriptor_read_master_agent:av_read
	wire    [3:0] in_dma_descriptor_read_master_translator_avalon_universal_master_0_byteenable;          // in_dma_descriptor_read_master_translator:uav_byteenable -> in_dma_descriptor_read_master_agent:av_byteenable
	wire          in_dma_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid;       // in_dma_descriptor_read_master_agent:av_readdatavalid -> in_dma_descriptor_read_master_translator:uav_readdatavalid
	wire          in_dma_descriptor_read_master_translator_avalon_universal_master_0_lock;                // in_dma_descriptor_read_master_translator:uav_lock -> in_dma_descriptor_read_master_agent:av_lock
	wire          in_dma_descriptor_read_master_translator_avalon_universal_master_0_write;               // in_dma_descriptor_read_master_translator:uav_write -> in_dma_descriptor_read_master_agent:av_write
	wire   [31:0] in_dma_descriptor_read_master_translator_avalon_universal_master_0_writedata;           // in_dma_descriptor_read_master_translator:uav_writedata -> in_dma_descriptor_read_master_agent:av_writedata
	wire    [2:0] in_dma_descriptor_read_master_translator_avalon_universal_master_0_burstcount;          // in_dma_descriptor_read_master_translator:uav_burstcount -> in_dma_descriptor_read_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                      // rsp_mux:src_valid -> in_dma_descriptor_read_master_agent:rp_valid
	wire   [83:0] rsp_mux_src_data;                                                                       // rsp_mux:src_data -> in_dma_descriptor_read_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                      // in_dma_descriptor_read_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                                    // rsp_mux:src_channel -> in_dma_descriptor_read_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                              // rsp_mux:src_startofpacket -> in_dma_descriptor_read_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                // rsp_mux:src_endofpacket -> in_dma_descriptor_read_master_agent:rp_endofpacket
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_debugaccess;        // in_dma_descriptor_write_master_translator:uav_debugaccess -> in_dma_descriptor_write_master_agent:av_debugaccess
	wire   [10:0] in_dma_descriptor_write_master_translator_avalon_universal_master_0_address;            // in_dma_descriptor_write_master_translator:uav_address -> in_dma_descriptor_write_master_agent:av_address
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_read;               // in_dma_descriptor_write_master_translator:uav_read -> in_dma_descriptor_write_master_agent:av_read
	wire    [3:0] in_dma_descriptor_write_master_translator_avalon_universal_master_0_byteenable;         // in_dma_descriptor_write_master_translator:uav_byteenable -> in_dma_descriptor_write_master_agent:av_byteenable
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid;      // in_dma_descriptor_write_master_agent:av_readdatavalid -> in_dma_descriptor_write_master_translator:uav_readdatavalid
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_waitrequest;        // in_dma_descriptor_write_master_agent:av_waitrequest -> in_dma_descriptor_write_master_translator:uav_waitrequest
	wire   [31:0] in_dma_descriptor_write_master_translator_avalon_universal_master_0_readdata;           // in_dma_descriptor_write_master_agent:av_readdata -> in_dma_descriptor_write_master_translator:uav_readdata
	wire    [1:0] in_dma_descriptor_write_master_translator_avalon_universal_master_0_response;           // in_dma_descriptor_write_master_agent:av_response -> in_dma_descriptor_write_master_translator:uav_response
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_lock;               // in_dma_descriptor_write_master_translator:uav_lock -> in_dma_descriptor_write_master_agent:av_lock
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_write;              // in_dma_descriptor_write_master_translator:uav_write -> in_dma_descriptor_write_master_agent:av_write
	wire   [31:0] in_dma_descriptor_write_master_translator_avalon_universal_master_0_writedata;          // in_dma_descriptor_write_master_translator:uav_writedata -> in_dma_descriptor_write_master_agent:av_writedata
	wire          in_dma_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid; // in_dma_descriptor_write_master_agent:av_writeresponsevalid -> in_dma_descriptor_write_master_translator:uav_writeresponsevalid
	wire    [2:0] in_dma_descriptor_write_master_translator_avalon_universal_master_0_burstcount;         // in_dma_descriptor_write_master_translator:uav_burstcount -> in_dma_descriptor_write_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                  // rsp_mux_001:src_valid -> in_dma_descriptor_write_master_agent:rp_valid
	wire   [83:0] rsp_mux_001_src_data;                                                                   // rsp_mux_001:src_data -> in_dma_descriptor_write_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                  // in_dma_descriptor_write_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                                // rsp_mux_001:src_channel -> in_dma_descriptor_write_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                          // rsp_mux_001:src_startofpacket -> in_dma_descriptor_write_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                            // rsp_mux_001:src_endofpacket -> in_dma_descriptor_write_master_agent:rp_endofpacket
	wire  [255:0] in_ram_s2_agent_m0_readdata;                                                            // in_ram_s2_translator:uav_readdata -> in_ram_s2_agent:m0_readdata
	wire          in_ram_s2_agent_m0_waitrequest;                                                         // in_ram_s2_translator:uav_waitrequest -> in_ram_s2_agent:m0_waitrequest
	wire          in_ram_s2_agent_m0_debugaccess;                                                         // in_ram_s2_agent:m0_debugaccess -> in_ram_s2_translator:uav_debugaccess
	wire   [10:0] in_ram_s2_agent_m0_address;                                                             // in_ram_s2_agent:m0_address -> in_ram_s2_translator:uav_address
	wire   [31:0] in_ram_s2_agent_m0_byteenable;                                                          // in_ram_s2_agent:m0_byteenable -> in_ram_s2_translator:uav_byteenable
	wire          in_ram_s2_agent_m0_read;                                                                // in_ram_s2_agent:m0_read -> in_ram_s2_translator:uav_read
	wire          in_ram_s2_agent_m0_readdatavalid;                                                       // in_ram_s2_translator:uav_readdatavalid -> in_ram_s2_agent:m0_readdatavalid
	wire          in_ram_s2_agent_m0_lock;                                                                // in_ram_s2_agent:m0_lock -> in_ram_s2_translator:uav_lock
	wire  [255:0] in_ram_s2_agent_m0_writedata;                                                           // in_ram_s2_agent:m0_writedata -> in_ram_s2_translator:uav_writedata
	wire          in_ram_s2_agent_m0_write;                                                               // in_ram_s2_agent:m0_write -> in_ram_s2_translator:uav_write
	wire    [5:0] in_ram_s2_agent_m0_burstcount;                                                          // in_ram_s2_agent:m0_burstcount -> in_ram_s2_translator:uav_burstcount
	wire          in_ram_s2_agent_rf_source_valid;                                                        // in_ram_s2_agent:rf_source_valid -> in_ram_s2_agent_rsp_fifo:in_valid
	wire  [336:0] in_ram_s2_agent_rf_source_data;                                                         // in_ram_s2_agent:rf_source_data -> in_ram_s2_agent_rsp_fifo:in_data
	wire          in_ram_s2_agent_rf_source_ready;                                                        // in_ram_s2_agent_rsp_fifo:in_ready -> in_ram_s2_agent:rf_source_ready
	wire          in_ram_s2_agent_rf_source_startofpacket;                                                // in_ram_s2_agent:rf_source_startofpacket -> in_ram_s2_agent_rsp_fifo:in_startofpacket
	wire          in_ram_s2_agent_rf_source_endofpacket;                                                  // in_ram_s2_agent:rf_source_endofpacket -> in_ram_s2_agent_rsp_fifo:in_endofpacket
	wire          in_ram_s2_agent_rsp_fifo_out_valid;                                                     // in_ram_s2_agent_rsp_fifo:out_valid -> in_ram_s2_agent:rf_sink_valid
	wire  [336:0] in_ram_s2_agent_rsp_fifo_out_data;                                                      // in_ram_s2_agent_rsp_fifo:out_data -> in_ram_s2_agent:rf_sink_data
	wire          in_ram_s2_agent_rsp_fifo_out_ready;                                                     // in_ram_s2_agent:rf_sink_ready -> in_ram_s2_agent_rsp_fifo:out_ready
	wire          in_ram_s2_agent_rsp_fifo_out_startofpacket;                                             // in_ram_s2_agent_rsp_fifo:out_startofpacket -> in_ram_s2_agent:rf_sink_startofpacket
	wire          in_ram_s2_agent_rsp_fifo_out_endofpacket;                                               // in_ram_s2_agent_rsp_fifo:out_endofpacket -> in_ram_s2_agent:rf_sink_endofpacket
	wire          in_dma_descriptor_read_master_agent_cp_valid;                                           // in_dma_descriptor_read_master_agent:cp_valid -> router:sink_valid
	wire   [83:0] in_dma_descriptor_read_master_agent_cp_data;                                            // in_dma_descriptor_read_master_agent:cp_data -> router:sink_data
	wire          in_dma_descriptor_read_master_agent_cp_ready;                                           // router:sink_ready -> in_dma_descriptor_read_master_agent:cp_ready
	wire          in_dma_descriptor_read_master_agent_cp_startofpacket;                                   // in_dma_descriptor_read_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          in_dma_descriptor_read_master_agent_cp_endofpacket;                                     // in_dma_descriptor_read_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                       // router:src_valid -> cmd_demux:sink_valid
	wire   [83:0] router_src_data;                                                                        // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                       // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                     // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                               // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                 // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          in_dma_descriptor_write_master_agent_cp_valid;                                          // in_dma_descriptor_write_master_agent:cp_valid -> router_001:sink_valid
	wire   [83:0] in_dma_descriptor_write_master_agent_cp_data;                                           // in_dma_descriptor_write_master_agent:cp_data -> router_001:sink_data
	wire          in_dma_descriptor_write_master_agent_cp_ready;                                          // router_001:sink_ready -> in_dma_descriptor_write_master_agent:cp_ready
	wire          in_dma_descriptor_write_master_agent_cp_startofpacket;                                  // in_dma_descriptor_write_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          in_dma_descriptor_write_master_agent_cp_endofpacket;                                    // in_dma_descriptor_write_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                   // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [83:0] router_001_src_data;                                                                    // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                   // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                                 // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                           // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                             // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          in_ram_s2_agent_rp_valid;                                                               // in_ram_s2_agent:rp_valid -> router_002:sink_valid
	wire  [335:0] in_ram_s2_agent_rp_data;                                                                // in_ram_s2_agent:rp_data -> router_002:sink_data
	wire          in_ram_s2_agent_rp_ready;                                                               // router_002:sink_ready -> in_ram_s2_agent:rp_ready
	wire          in_ram_s2_agent_rp_startofpacket;                                                       // in_ram_s2_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          in_ram_s2_agent_rp_endofpacket;                                                         // in_ram_s2_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                   // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [83:0] cmd_demux_src0_data;                                                                    // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                   // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                                 // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                           // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                             // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                               // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire   [83:0] cmd_demux_001_src0_data;                                                                // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                               // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                             // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                       // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                         // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                   // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [83:0] rsp_demux_src0_data;                                                                    // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                   // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                                 // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                           // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                             // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                   // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire   [83:0] rsp_demux_src1_data;                                                                    // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                   // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                                 // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                           // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                             // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                                      // cmd_mux:src_valid -> in_ram_s2_cmd_width_adapter:in_valid
	wire   [83:0] cmd_mux_src_data;                                                                       // cmd_mux:src_data -> in_ram_s2_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                      // in_ram_s2_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                                    // cmd_mux:src_channel -> in_ram_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                              // cmd_mux:src_startofpacket -> in_ram_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                // cmd_mux:src_endofpacket -> in_ram_s2_cmd_width_adapter:in_endofpacket
	wire          in_ram_s2_cmd_width_adapter_src_valid;                                                  // in_ram_s2_cmd_width_adapter:out_valid -> in_ram_s2_agent:cp_valid
	wire  [335:0] in_ram_s2_cmd_width_adapter_src_data;                                                   // in_ram_s2_cmd_width_adapter:out_data -> in_ram_s2_agent:cp_data
	wire          in_ram_s2_cmd_width_adapter_src_ready;                                                  // in_ram_s2_agent:cp_ready -> in_ram_s2_cmd_width_adapter:out_ready
	wire    [1:0] in_ram_s2_cmd_width_adapter_src_channel;                                                // in_ram_s2_cmd_width_adapter:out_channel -> in_ram_s2_agent:cp_channel
	wire          in_ram_s2_cmd_width_adapter_src_startofpacket;                                          // in_ram_s2_cmd_width_adapter:out_startofpacket -> in_ram_s2_agent:cp_startofpacket
	wire          in_ram_s2_cmd_width_adapter_src_endofpacket;                                            // in_ram_s2_cmd_width_adapter:out_endofpacket -> in_ram_s2_agent:cp_endofpacket
	wire          router_002_src_valid;                                                                   // router_002:src_valid -> in_ram_s2_rsp_width_adapter:in_valid
	wire  [335:0] router_002_src_data;                                                                    // router_002:src_data -> in_ram_s2_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                                   // in_ram_s2_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                                 // router_002:src_channel -> in_ram_s2_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                           // router_002:src_startofpacket -> in_ram_s2_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                             // router_002:src_endofpacket -> in_ram_s2_rsp_width_adapter:in_endofpacket
	wire          in_ram_s2_rsp_width_adapter_src_valid;                                                  // in_ram_s2_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire   [83:0] in_ram_s2_rsp_width_adapter_src_data;                                                   // in_ram_s2_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          in_ram_s2_rsp_width_adapter_src_ready;                                                  // rsp_demux:sink_ready -> in_ram_s2_rsp_width_adapter:out_ready
	wire    [1:0] in_ram_s2_rsp_width_adapter_src_channel;                                                // in_ram_s2_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          in_ram_s2_rsp_width_adapter_src_startofpacket;                                          // in_ram_s2_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          in_ram_s2_rsp_width_adapter_src_endofpacket;                                            // in_ram_s2_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          in_ram_s2_agent_rdata_fifo_src_valid;                                                   // in_ram_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] in_ram_s2_agent_rdata_fifo_src_data;                                                    // in_ram_s2_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          in_ram_s2_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter:in_0_ready -> in_ram_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                          // avalon_st_adapter:out_0_valid -> in_ram_s2_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                           // avalon_st_adapter:out_0_data -> in_ram_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                          // in_ram_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                          // avalon_st_adapter:out_0_error -> in_ram_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (11),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) in_dma_descriptor_read_master_translator (
		.clk                    (mem_clk_out_clk_clk),                                                              //                       clk.clk
		.reset                  (in_dma_reset_n_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address            (in_dma_descriptor_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (in_dma_descriptor_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (in_dma_descriptor_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (in_dma_descriptor_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (in_dma_descriptor_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (in_dma_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (in_dma_descriptor_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (in_dma_descriptor_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (in_dma_descriptor_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (in_dma_descriptor_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (in_dma_descriptor_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (in_dma_descriptor_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (in_dma_descriptor_read_master_waitrequest),                                        //                          .waitrequest
		.av_read                (in_dma_descriptor_read_master_read),                                               //                          .read
		.av_readdata            (in_dma_descriptor_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (in_dma_descriptor_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (11),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (1),
		.USE_WRITERESPONSE           (1),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) in_dma_descriptor_write_master_translator (
		.clk                    (mem_clk_out_clk_clk),                                                                    //                       clk.clk
		.reset                  (in_dma_reset_n_reset_bridge_in_reset_reset),                                             //                     reset.reset
		.uav_address            (in_dma_descriptor_write_master_translator_avalon_universal_master_0_address),            // avalon_universal_master_0.address
		.uav_burstcount         (in_dma_descriptor_write_master_translator_avalon_universal_master_0_burstcount),         //                          .burstcount
		.uav_read               (in_dma_descriptor_write_master_translator_avalon_universal_master_0_read),               //                          .read
		.uav_write              (in_dma_descriptor_write_master_translator_avalon_universal_master_0_write),              //                          .write
		.uav_waitrequest        (in_dma_descriptor_write_master_translator_avalon_universal_master_0_waitrequest),        //                          .waitrequest
		.uav_readdatavalid      (in_dma_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid),      //                          .readdatavalid
		.uav_byteenable         (in_dma_descriptor_write_master_translator_avalon_universal_master_0_byteenable),         //                          .byteenable
		.uav_readdata           (in_dma_descriptor_write_master_translator_avalon_universal_master_0_readdata),           //                          .readdata
		.uav_writedata          (in_dma_descriptor_write_master_translator_avalon_universal_master_0_writedata),          //                          .writedata
		.uav_lock               (in_dma_descriptor_write_master_translator_avalon_universal_master_0_lock),               //                          .lock
		.uav_debugaccess        (in_dma_descriptor_write_master_translator_avalon_universal_master_0_debugaccess),        //                          .debugaccess
		.uav_response           (in_dma_descriptor_write_master_translator_avalon_universal_master_0_response),           //                          .response
		.uav_writeresponsevalid (in_dma_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid), //                          .writeresponsevalid
		.av_address             (in_dma_descriptor_write_master_address),                                                 //      avalon_anti_master_0.address
		.av_waitrequest         (in_dma_descriptor_write_master_waitrequest),                                             //                          .waitrequest
		.av_byteenable          (in_dma_descriptor_write_master_byteenable),                                              //                          .byteenable
		.av_write               (in_dma_descriptor_write_master_write),                                                   //                          .write
		.av_writedata           (in_dma_descriptor_write_master_writedata),                                               //                          .writedata
		.av_response            (in_dma_descriptor_write_master_response),                                                //                          .response
		.av_writeresponsevalid  (in_dma_descriptor_write_master_writeresponsevalid),                                      //                          .writeresponsevalid
		.av_burstcount          (1'b1),                                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                                   //               (terminated)
		.av_read                (1'b0),                                                                                   //               (terminated)
		.av_readdata            (),                                                                                       //               (terminated)
		.av_readdatavalid       (),                                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                                   //               (terminated)
		.uav_clken              (),                                                                                       //               (terminated)
		.av_clken               (1'b1)                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_ram_s2_translator (
		.clk                    (mem_clk_out_clk_clk),                        //                      clk.clk
		.reset                  (in_dma_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (in_ram_s2_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (in_ram_s2_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (in_ram_s2_agent_m0_read),                    //                         .read
		.uav_write              (in_ram_s2_agent_m0_write),                   //                         .write
		.uav_waitrequest        (in_ram_s2_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (in_ram_s2_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (in_ram_s2_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (in_ram_s2_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (in_ram_s2_agent_m0_writedata),               //                         .writedata
		.uav_lock               (in_ram_s2_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (in_ram_s2_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (in_ram_s2_address),                          //      avalon_anti_slave_0.address
		.av_write               (in_ram_s2_write),                            //                         .write
		.av_readdata            (in_ram_s2_readdata),                         //                         .readdata
		.av_writedata           (in_ram_s2_writedata),                        //                         .writedata
		.av_byteenable          (in_ram_s2_byteenable),                       //                         .byteenable
		.av_chipselect          (in_ram_s2_chipselect),                       //                         .chipselect
		.av_clken               (in_ram_s2_clken),                            //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (83),
		.PKT_ORI_BURST_SIZE_L      (81),
		.PKT_RESPONSE_STATUS_H     (80),
		.PKT_RESPONSE_STATUS_L     (79),
		.PKT_QOS_H                 (68),
		.PKT_QOS_L                 (68),
		.PKT_DATA_SIDEBAND_H       (66),
		.PKT_DATA_SIDEBAND_L       (66),
		.PKT_ADDR_SIDEBAND_H       (65),
		.PKT_ADDR_SIDEBAND_L       (65),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_CACHE_H               (78),
		.PKT_CACHE_L               (75),
		.PKT_THREAD_ID_H           (71),
		.PKT_THREAD_ID_L           (71),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_EXCLUSIVE       (52),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (74),
		.PKT_PROTECTION_L          (72),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (70),
		.PKT_DEST_ID_L             (70),
		.ST_DATA_W                 (84),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) in_dma_descriptor_read_master_agent (
		.clk                   (mem_clk_out_clk_clk),                                                              //       clk.clk
		.reset                 (in_dma_reset_n_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.av_address            (in_dma_descriptor_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (in_dma_descriptor_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (in_dma_descriptor_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (in_dma_descriptor_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (in_dma_descriptor_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (in_dma_descriptor_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (in_dma_descriptor_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (in_dma_descriptor_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (in_dma_descriptor_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (in_dma_descriptor_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (in_dma_descriptor_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (in_dma_descriptor_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (in_dma_descriptor_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (in_dma_descriptor_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (in_dma_descriptor_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (in_dma_descriptor_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (83),
		.PKT_ORI_BURST_SIZE_L      (81),
		.PKT_RESPONSE_STATUS_H     (80),
		.PKT_RESPONSE_STATUS_L     (79),
		.PKT_QOS_H                 (68),
		.PKT_QOS_L                 (68),
		.PKT_DATA_SIDEBAND_H       (66),
		.PKT_DATA_SIDEBAND_L       (66),
		.PKT_ADDR_SIDEBAND_H       (65),
		.PKT_ADDR_SIDEBAND_L       (65),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_CACHE_H               (78),
		.PKT_CACHE_L               (75),
		.PKT_THREAD_ID_H           (71),
		.PKT_THREAD_ID_L           (71),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_EXCLUSIVE       (52),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (74),
		.PKT_PROTECTION_L          (72),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (70),
		.PKT_DEST_ID_L             (70),
		.ST_DATA_W                 (84),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1)
	) in_dma_descriptor_write_master_agent (
		.clk                   (mem_clk_out_clk_clk),                                                                    //       clk.clk
		.reset                 (in_dma_reset_n_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.av_address            (in_dma_descriptor_write_master_translator_avalon_universal_master_0_address),            //        av.address
		.av_write              (in_dma_descriptor_write_master_translator_avalon_universal_master_0_write),              //          .write
		.av_read               (in_dma_descriptor_write_master_translator_avalon_universal_master_0_read),               //          .read
		.av_writedata          (in_dma_descriptor_write_master_translator_avalon_universal_master_0_writedata),          //          .writedata
		.av_readdata           (in_dma_descriptor_write_master_translator_avalon_universal_master_0_readdata),           //          .readdata
		.av_waitrequest        (in_dma_descriptor_write_master_translator_avalon_universal_master_0_waitrequest),        //          .waitrequest
		.av_readdatavalid      (in_dma_descriptor_write_master_translator_avalon_universal_master_0_readdatavalid),      //          .readdatavalid
		.av_byteenable         (in_dma_descriptor_write_master_translator_avalon_universal_master_0_byteenable),         //          .byteenable
		.av_burstcount         (in_dma_descriptor_write_master_translator_avalon_universal_master_0_burstcount),         //          .burstcount
		.av_debugaccess        (in_dma_descriptor_write_master_translator_avalon_universal_master_0_debugaccess),        //          .debugaccess
		.av_lock               (in_dma_descriptor_write_master_translator_avalon_universal_master_0_lock),               //          .lock
		.av_response           (in_dma_descriptor_write_master_translator_avalon_universal_master_0_response),           //          .response
		.av_writeresponsevalid (in_dma_descriptor_write_master_translator_avalon_universal_master_0_writeresponsevalid), //          .writeresponsevalid
		.cp_valid              (in_dma_descriptor_write_master_agent_cp_valid),                                          //        cp.valid
		.cp_data               (in_dma_descriptor_write_master_agent_cp_data),                                           //          .data
		.cp_startofpacket      (in_dma_descriptor_write_master_agent_cp_startofpacket),                                  //          .startofpacket
		.cp_endofpacket        (in_dma_descriptor_write_master_agent_cp_endofpacket),                                    //          .endofpacket
		.cp_ready              (in_dma_descriptor_write_master_agent_cp_ready),                                          //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                  //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                   //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                                //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                            //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready)                                                                   //          .ready
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (335),
		.PKT_ORI_BURST_SIZE_L      (333),
		.PKT_RESPONSE_STATUS_H     (332),
		.PKT_RESPONSE_STATUS_L     (331),
		.PKT_BURST_SIZE_H          (314),
		.PKT_BURST_SIZE_L          (312),
		.PKT_TRANS_LOCK            (303),
		.PKT_BEGIN_BURST           (319),
		.PKT_PROTECTION_H          (326),
		.PKT_PROTECTION_L          (324),
		.PKT_BURSTWRAP_H           (311),
		.PKT_BURSTWRAP_L           (311),
		.PKT_BYTE_CNT_H            (310),
		.PKT_BYTE_CNT_L            (305),
		.PKT_ADDR_H                (298),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (299),
		.PKT_TRANS_POSTED          (300),
		.PKT_TRANS_WRITE           (301),
		.PKT_TRANS_READ            (302),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (321),
		.PKT_SRC_ID_L              (321),
		.PKT_DEST_ID_H             (322),
		.PKT_DEST_ID_L             (322),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (336),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) in_ram_s2_agent (
		.clk                     (mem_clk_out_clk_clk),                           //             clk.clk
		.reset                   (in_dma_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (in_ram_s2_agent_m0_address),                    //              m0.address
		.m0_burstcount           (in_ram_s2_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (in_ram_s2_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (in_ram_s2_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (in_ram_s2_agent_m0_lock),                       //                .lock
		.m0_readdata             (in_ram_s2_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (in_ram_s2_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (in_ram_s2_agent_m0_read),                       //                .read
		.m0_waitrequest          (in_ram_s2_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (in_ram_s2_agent_m0_writedata),                  //                .writedata
		.m0_write                (in_ram_s2_agent_m0_write),                      //                .write
		.rp_endofpacket          (in_ram_s2_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (in_ram_s2_agent_rp_ready),                      //                .ready
		.rp_valid                (in_ram_s2_agent_rp_valid),                      //                .valid
		.rp_data                 (in_ram_s2_agent_rp_data),                       //                .data
		.rp_startofpacket        (in_ram_s2_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (in_ram_s2_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (in_ram_s2_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (in_ram_s2_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (in_ram_s2_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (in_ram_s2_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (in_ram_s2_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (in_ram_s2_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (in_ram_s2_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (in_ram_s2_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (in_ram_s2_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (in_ram_s2_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (in_ram_s2_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (in_ram_s2_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (in_ram_s2_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (in_ram_s2_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (in_ram_s2_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (in_ram_s2_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (in_ram_s2_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (in_ram_s2_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (337),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) in_ram_s2_agent_rsp_fifo (
		.clk               (mem_clk_out_clk_clk),                        //       clk.clk
		.reset             (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (in_ram_s2_agent_rf_source_data),             //        in.data
		.in_valid          (in_ram_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (in_ram_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (in_ram_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (in_ram_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (in_ram_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (in_ram_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (in_ram_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (in_ram_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (in_ram_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	soc_system_gmm_mm_interconnect_0_router router (
		.sink_ready         (in_dma_descriptor_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (in_dma_descriptor_read_master_agent_cp_valid),         //          .valid
		.sink_data          (in_dma_descriptor_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (in_dma_descriptor_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (in_dma_descriptor_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_clk_out_clk_clk),                                  //       clk.clk
		.reset              (in_dma_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_src_ready),                                     //       src.ready
		.src_valid          (router_src_valid),                                     //          .valid
		.src_data           (router_src_data),                                      //          .data
		.src_channel        (router_src_channel),                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_router router_001 (
		.sink_ready         (in_dma_descriptor_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (in_dma_descriptor_write_master_agent_cp_valid),         //          .valid
		.sink_data          (in_dma_descriptor_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (in_dma_descriptor_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (in_dma_descriptor_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mem_clk_out_clk_clk),                                   //       clk.clk
		.reset              (in_dma_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //       src.ready
		.src_valid          (router_001_src_valid),                                  //          .valid
		.src_data           (router_001_src_data),                                   //          .data
		.src_channel        (router_001_src_channel),                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (in_ram_s2_agent_rp_ready),                   //      sink.ready
		.sink_valid         (in_ram_s2_agent_rp_valid),                   //          .valid
		.sink_data          (in_ram_s2_agent_rp_data),                    //          .data
		.sink_startofpacket (in_ram_s2_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (in_ram_s2_agent_rp_endofpacket),             //          .endofpacket
		.clk                (mem_clk_out_clk_clk),                        //       clk.clk
		.reset              (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                       //       src.ready
		.src_valid          (router_002_src_valid),                       //          .valid
		.src_data           (router_002_src_data),                        //          .data
		.src_channel        (router_002_src_channel),                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                  //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (mem_clk_out_clk_clk),                        //       clk.clk
		.reset              (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                           //      sink.ready
		.sink_channel       (router_src_channel),                         //          .channel
		.sink_data          (router_src_data),                            //          .data
		.sink_startofpacket (router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_src0_data),                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (mem_clk_out_clk_clk),                        //       clk.clk
		.reset              (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                       //      sink.ready
		.sink_channel       (router_001_src_channel),                     //          .channel
		.sink_data          (router_001_src_data),                        //          .data
		.sink_startofpacket (router_001_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_001_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)              //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (mem_clk_out_clk_clk),                        //       clk.clk
		.reset               (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                          //          .valid
		.src_data            (cmd_mux_src_data),                           //          .data
		.src_channel         (cmd_mux_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                     //          .channel
		.sink0_data          (cmd_demux_src0_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)              //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (mem_clk_out_clk_clk),                           //       clk.clk
		.reset              (in_dma_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (in_ram_s2_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (in_ram_s2_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (in_ram_s2_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (in_ram_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (in_ram_s2_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (in_ram_s2_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (mem_clk_out_clk_clk),                        //       clk.clk
		.reset               (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                          //          .valid
		.src_data            (rsp_mux_src_data),                           //          .data
		.src_channel         (rsp_mux_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_gmm_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (mem_clk_out_clk_clk),                        //       clk.clk
		.reset               (in_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                      //          .valid
		.src_data            (rsp_mux_001_src_data),                       //          .data
		.src_channel         (rsp_mux_001_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (46),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (53),
		.IN_PKT_TRANS_COMPRESSED_READ  (47),
		.IN_PKT_TRANS_WRITE            (49),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (80),
		.IN_PKT_RESPONSE_STATUS_L      (79),
		.IN_PKT_TRANS_EXCLUSIVE        (52),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (81),
		.IN_PKT_ORI_BURST_SIZE_H       (83),
		.IN_ST_DATA_W                  (84),
		.OUT_PKT_ADDR_H                (298),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (310),
		.OUT_PKT_BYTE_CNT_L            (305),
		.OUT_PKT_TRANS_COMPRESSED_READ (299),
		.OUT_PKT_BURST_SIZE_H          (314),
		.OUT_PKT_BURST_SIZE_L          (312),
		.OUT_PKT_RESPONSE_STATUS_H     (332),
		.OUT_PKT_RESPONSE_STATUS_L     (331),
		.OUT_PKT_TRANS_EXCLUSIVE       (304),
		.OUT_PKT_BURST_TYPE_H          (316),
		.OUT_PKT_BURST_TYPE_L          (315),
		.OUT_PKT_ORI_BURST_SIZE_L      (333),
		.OUT_PKT_ORI_BURST_SIZE_H      (335),
		.OUT_ST_DATA_W                 (336),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) in_ram_s2_cmd_width_adapter (
		.clk                  (mem_clk_out_clk_clk),                           //       clk.clk
		.reset                (in_dma_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                             //          .ready
		.in_data              (cmd_mux_src_data),                              //          .data
		.out_endofpacket      (in_ram_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (in_ram_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (in_ram_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (in_ram_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (in_ram_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (in_ram_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (298),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (310),
		.IN_PKT_BYTE_CNT_L             (305),
		.IN_PKT_TRANS_COMPRESSED_READ  (299),
		.IN_PKT_TRANS_WRITE            (301),
		.IN_PKT_BURSTWRAP_H            (311),
		.IN_PKT_BURSTWRAP_L            (311),
		.IN_PKT_BURST_SIZE_H           (314),
		.IN_PKT_BURST_SIZE_L           (312),
		.IN_PKT_RESPONSE_STATUS_H      (332),
		.IN_PKT_RESPONSE_STATUS_L      (331),
		.IN_PKT_TRANS_EXCLUSIVE        (304),
		.IN_PKT_BURST_TYPE_H           (316),
		.IN_PKT_BURST_TYPE_L           (315),
		.IN_PKT_ORI_BURST_SIZE_L       (333),
		.IN_PKT_ORI_BURST_SIZE_H       (335),
		.IN_ST_DATA_W                  (336),
		.OUT_PKT_ADDR_H                (46),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (53),
		.OUT_PKT_TRANS_COMPRESSED_READ (47),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (80),
		.OUT_PKT_RESPONSE_STATUS_L     (79),
		.OUT_PKT_TRANS_EXCLUSIVE       (52),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (81),
		.OUT_PKT_ORI_BURST_SIZE_H      (83),
		.OUT_ST_DATA_W                 (84),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) in_ram_s2_rsp_width_adapter (
		.clk                  (mem_clk_out_clk_clk),                           //       clk.clk
		.reset                (in_dma_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (router_002_src_valid),                          //      sink.valid
		.in_channel           (router_002_src_channel),                        //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_002_src_ready),                          //          .ready
		.in_data              (router_002_src_data),                           //          .data
		.out_endofpacket      (in_ram_s2_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (in_ram_s2_rsp_width_adapter_src_data),          //          .data
		.out_channel          (in_ram_s2_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (in_ram_s2_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (in_ram_s2_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (in_ram_s2_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	soc_system_gmm_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (mem_clk_out_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (in_dma_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (in_ram_s2_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (in_ram_s2_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (in_ram_s2_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)               //         .error
	);

endmodule
